#
# Control flow.
#

snippet if "if statement"
if (${1: /* Condition. */}) {
	${2:/* Body. */}
}
endsnippet

snippet elif "else if statement"
else if (${1: /* Condition. */}) {
	${2:/* Body. */}
}
endsnippet

snippet el "else statement"
else {
	${1:/* Body. */}
}
endsnippet

snippet sw "switch statement"
switch (${1}) {
case ${2}:
	${3: /* Body. */}
	${4: break; }
${5: default:
	${6: /* Body. */}
}
}
endsnippet

#
# Loops.
#

# While loops.

snippet wh "while loop"
while (${1:i != count}) {
	${2:/* Body. */}
}
endsnippet

snippet do "do-while loop"
do {
	${2:/* Body. */}
}
while (${1:i != count});
endsnippet

# The usual for loop with unsigned integer induction variable.

snippet for "for loop"
for (auto ${2:i} = 0u; $2 != ${1:count}; ${3:++$2})
{
	${4:/* Body. */}
}
endsnippet

# A for loop in which one needs access to the iterator being used to traverse a
# container.

snippet fori "iterator for loop"
for (auto ${2:i} = begin($1); $2 != end(${1:cont}); ${3:++$2})
{
	${4:/* Body. */}
}
endsnippet

# Range-for loop.

snippet forr "range-for loop"
for (${3:const auto&} ${2:x} : ${1:cont}) {
	${4:/* Body. */}
}
endsnippet

# Range-for loop over list.

snippet forl "list range-for loop"
for (const auto ${2:x} : {${1:1, 2, 3}}) {
	${3:/* Body. */}
}
endsnippet

# Foreach loop.

snippet fore "foreach loop"
for_each(begin($1), end(${1:const}), [&](const auto& ${2:x}) {
	${3:/* Body. */}
});
endsnippet
